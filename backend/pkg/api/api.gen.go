// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// BearerToken defines model for BearerToken.
type BearerToken struct {
	Token string `json:"token"`
}

// CheckIn defines model for CheckIn.
type CheckIn struct {
	Date openapi_types.Date `json:"date"`

	// Id unique id of the user
	Id        int64  `json:"id"`
	Timestamp string `json:"timestamp"`
	UserId    int64  `json:"userId"`
}

// CheckInDate defines model for CheckInDate.
type CheckInDate struct {
	Date openapi_types.Date `json:"date"`
}

// CheckInWithUser defines model for CheckInWithUser.
type CheckInWithUser struct {
	Date  openapi_types.Date `json:"date"`
	Group *string            `json:"group,omitempty"`

	// Id unique id of the user
	Id        int64   `json:"id"`
	MemberId  *string `json:"memberId,omitempty"`
	Name      string  `json:"name"`
	RfidUid   *string `json:"rfidUid,omitempty"`
	Role      string  `json:"role"`
	Timestamp string  `json:"timestamp"`
	UserId    int64   `json:"userId"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Message Error message
	Message string `json:"message"`
}

// LoginCredentials defines model for LoginCredentials.
type LoginCredentials struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// NewUser defines model for NewUser.
type NewUser struct {
	Group    *string `json:"group,omitempty"`
	MemberId *string `json:"memberId,omitempty"`
	Name     string  `json:"name"`
	RfidUid  *string `json:"rfidUid,omitempty"`
	Role     string  `json:"role"`
}

// Password defines model for Password.
type Password struct {
	Password string `json:"password"`
}

// User defines model for User.
type User struct {
	Group *string `json:"group,omitempty"`

	// Id unique id of the user
	Id       int64   `json:"id"`
	MemberId *string `json:"memberId,omitempty"`
	Name     string  `json:"name"`
	RfidUid  *string `json:"rfidUid,omitempty"`
	Role     string  `json:"role"`
}

// CheckInIdPathParam defines model for checkInIdPathParam.
type CheckInIdPathParam = int64

// UserIdPathParam defines model for userIdPathParam.
type UserIdPathParam = int64

// CreateRfidCheckInParams defines parameters for CreateRfidCheckIn.
type CreateRfidCheckInParams struct {
	Rfid      string     `form:"rfid" json:"rfid"`
	Timestamp *time.Time `form:"timestamp,omitempty" json:"timestamp,omitempty"`
}

// ListCheckInsPerDayParams defines parameters for ListCheckInsPerDay.
type ListCheckInsPerDayParams struct {
	Day openapi_types.Date `form:"day" json:"day"`
}

// CreateCheckInParams defines parameters for CreateCheckIn.
type CreateCheckInParams struct {
	Timestamp *time.Time `form:"timestamp,omitempty" json:"timestamp,omitempty"`
}

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = LoginCredentials

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = NewUser

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = User

// UpdateUserPasswordJSONRequestBody defines body for UpdateUserPassword for application/json ContentType.
type UpdateUserPasswordJSONRequestBody = Password

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /api/login)
	Login(w http.ResponseWriter, r *http.Request)

	// (GET /api/v1/checkins)
	ListCheckIns(w http.ResponseWriter, r *http.Request)

	// (POST /api/v1/checkins)
	CreateRfidCheckIn(w http.ResponseWriter, r *http.Request, params CreateRfidCheckInParams)

	// (GET /api/v1/checkins/all)
	ListAllCheckIns(w http.ResponseWriter, r *http.Request)

	// (GET /api/v1/checkins/dates)
	ListCheckInDates(w http.ResponseWriter, r *http.Request)

	// (GET /api/v1/checkins/per-day)
	ListCheckInsPerDay(w http.ResponseWriter, r *http.Request, params ListCheckInsPerDayParams)

	// (DELETE /api/v1/checkins/{checkInId})
	DeleteCheckIn(w http.ResponseWriter, r *http.Request, checkInId CheckInIdPathParam)

	// (GET /api/v1/user-groups)
	ListUserGroups(w http.ResponseWriter, r *http.Request)

	// (GET /api/v1/users)
	ListUsers(w http.ResponseWriter, r *http.Request)

	// (POST /api/v1/users)
	CreateUser(w http.ResponseWriter, r *http.Request)

	// (DELETE /api/v1/users/all)
	DeleteAllUsers(w http.ResponseWriter, r *http.Request)

	// (GET /api/v1/users/me)
	GetAuthenticatedUser(w http.ResponseWriter, r *http.Request)

	// (DELETE /api/v1/users/{userId})
	DeleteUser(w http.ResponseWriter, r *http.Request, userId UserIdPathParam)

	// (GET /api/v1/users/{userId})
	GetUser(w http.ResponseWriter, r *http.Request, userId UserIdPathParam)

	// (PUT /api/v1/users/{userId})
	UpdateUser(w http.ResponseWriter, r *http.Request, userId UserIdPathParam)

	// (DELETE /api/v1/users/{userId}/checkins)
	DeleteUserCheckIns(w http.ResponseWriter, r *http.Request, userId UserIdPathParam)

	// (GET /api/v1/users/{userId}/checkins)
	GetUserCheckIns(w http.ResponseWriter, r *http.Request, userId UserIdPathParam)

	// (POST /api/v1/users/{userId}/checkins)
	CreateCheckIn(w http.ResponseWriter, r *http.Request, userId UserIdPathParam, params CreateCheckInParams)

	// (PUT /api/v1/users/{userId}/password)
	UpdateUserPassword(w http.ResponseWriter, r *http.Request, userId UserIdPathParam)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// (POST /api/login)
func (_ Unimplemented) Login(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /api/v1/checkins)
func (_ Unimplemented) ListCheckIns(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /api/v1/checkins)
func (_ Unimplemented) CreateRfidCheckIn(w http.ResponseWriter, r *http.Request, params CreateRfidCheckInParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /api/v1/checkins/all)
func (_ Unimplemented) ListAllCheckIns(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /api/v1/checkins/dates)
func (_ Unimplemented) ListCheckInDates(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /api/v1/checkins/per-day)
func (_ Unimplemented) ListCheckInsPerDay(w http.ResponseWriter, r *http.Request, params ListCheckInsPerDayParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (DELETE /api/v1/checkins/{checkInId})
func (_ Unimplemented) DeleteCheckIn(w http.ResponseWriter, r *http.Request, checkInId CheckInIdPathParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /api/v1/user-groups)
func (_ Unimplemented) ListUserGroups(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /api/v1/users)
func (_ Unimplemented) ListUsers(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /api/v1/users)
func (_ Unimplemented) CreateUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (DELETE /api/v1/users/all)
func (_ Unimplemented) DeleteAllUsers(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /api/v1/users/me)
func (_ Unimplemented) GetAuthenticatedUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (DELETE /api/v1/users/{userId})
func (_ Unimplemented) DeleteUser(w http.ResponseWriter, r *http.Request, userId UserIdPathParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /api/v1/users/{userId})
func (_ Unimplemented) GetUser(w http.ResponseWriter, r *http.Request, userId UserIdPathParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (PUT /api/v1/users/{userId})
func (_ Unimplemented) UpdateUser(w http.ResponseWriter, r *http.Request, userId UserIdPathParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (DELETE /api/v1/users/{userId}/checkins)
func (_ Unimplemented) DeleteUserCheckIns(w http.ResponseWriter, r *http.Request, userId UserIdPathParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /api/v1/users/{userId}/checkins)
func (_ Unimplemented) GetUserCheckIns(w http.ResponseWriter, r *http.Request, userId UserIdPathParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /api/v1/users/{userId}/checkins)
func (_ Unimplemented) CreateCheckIn(w http.ResponseWriter, r *http.Request, userId UserIdPathParam, params CreateCheckInParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (PUT /api/v1/users/{userId}/password)
func (_ Unimplemented) UpdateUserPassword(w http.ResponseWriter, r *http.Request, userId UserIdPathParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Login(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListCheckIns operation middleware
func (siw *ServerInterfaceWrapper) ListCheckIns(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListCheckIns(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateRfidCheckIn operation middleware
func (siw *ServerInterfaceWrapper) CreateRfidCheckIn(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateRfidCheckInParams

	// ------------- Required query parameter "rfid" -------------

	if paramValue := r.URL.Query().Get("rfid"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "rfid"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "rfid", r.URL.Query(), &params.Rfid)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "rfid", Err: err})
		return
	}

	// ------------- Optional query parameter "timestamp" -------------

	err = runtime.BindQueryParameter("form", true, false, "timestamp", r.URL.Query(), &params.Timestamp)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "timestamp", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateRfidCheckIn(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListAllCheckIns operation middleware
func (siw *ServerInterfaceWrapper) ListAllCheckIns(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListAllCheckIns(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListCheckInDates operation middleware
func (siw *ServerInterfaceWrapper) ListCheckInDates(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListCheckInDates(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListCheckInsPerDay operation middleware
func (siw *ServerInterfaceWrapper) ListCheckInsPerDay(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCheckInsPerDayParams

	// ------------- Required query parameter "day" -------------

	if paramValue := r.URL.Query().Get("day"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "day"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "day", r.URL.Query(), &params.Day)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "day", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListCheckInsPerDay(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteCheckIn operation middleware
func (siw *ServerInterfaceWrapper) DeleteCheckIn(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "checkInId" -------------
	var checkInId CheckInIdPathParam

	err = runtime.BindStyledParameterWithOptions("simple", "checkInId", chi.URLParam(r, "checkInId"), &checkInId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "checkInId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteCheckIn(w, r, checkInId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListUserGroups operation middleware
func (siw *ServerInterfaceWrapper) ListUserGroups(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListUserGroups(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListUsers operation middleware
func (siw *ServerInterfaceWrapper) ListUsers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListUsers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteAllUsers operation middleware
func (siw *ServerInterfaceWrapper) DeleteAllUsers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAllUsers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetAuthenticatedUser operation middleware
func (siw *ServerInterfaceWrapper) GetAuthenticatedUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAuthenticatedUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId UserIdPathParam

	err = runtime.BindStyledParameterWithOptions("simple", "userId", chi.URLParam(r, "userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUser(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId UserIdPathParam

	err = runtime.BindStyledParameterWithOptions("simple", "userId", chi.URLParam(r, "userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUser(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId UserIdPathParam

	err = runtime.BindStyledParameterWithOptions("simple", "userId", chi.URLParam(r, "userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateUser(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteUserCheckIns operation middleware
func (siw *ServerInterfaceWrapper) DeleteUserCheckIns(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId UserIdPathParam

	err = runtime.BindStyledParameterWithOptions("simple", "userId", chi.URLParam(r, "userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUserCheckIns(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetUserCheckIns operation middleware
func (siw *ServerInterfaceWrapper) GetUserCheckIns(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId UserIdPathParam

	err = runtime.BindStyledParameterWithOptions("simple", "userId", chi.URLParam(r, "userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserCheckIns(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateCheckIn operation middleware
func (siw *ServerInterfaceWrapper) CreateCheckIn(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId UserIdPathParam

	err = runtime.BindStyledParameterWithOptions("simple", "userId", chi.URLParam(r, "userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateCheckInParams

	// ------------- Optional query parameter "timestamp" -------------

	err = runtime.BindQueryParameter("form", true, false, "timestamp", r.URL.Query(), &params.Timestamp)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "timestamp", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateCheckIn(w, r, userId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateUserPassword operation middleware
func (siw *ServerInterfaceWrapper) UpdateUserPassword(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId UserIdPathParam

	err = runtime.BindStyledParameterWithOptions("simple", "userId", chi.URLParam(r, "userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateUserPassword(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/login", wrapper.Login)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/checkins", wrapper.ListCheckIns)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/checkins", wrapper.CreateRfidCheckIn)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/checkins/all", wrapper.ListAllCheckIns)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/checkins/dates", wrapper.ListCheckInDates)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/checkins/per-day", wrapper.ListCheckInsPerDay)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/checkins/{checkInId}", wrapper.DeleteCheckIn)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/user-groups", wrapper.ListUserGroups)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/users", wrapper.ListUsers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/users", wrapper.CreateUser)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/users/all", wrapper.DeleteAllUsers)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/users/me", wrapper.GetAuthenticatedUser)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/users/{userId}", wrapper.DeleteUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/users/{userId}", wrapper.GetUser)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/users/{userId}", wrapper.UpdateUser)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/users/{userId}/checkins", wrapper.DeleteUserCheckIns)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/users/{userId}/checkins", wrapper.GetUserCheckIns)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/users/{userId}/checkins", wrapper.CreateCheckIn)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/users/{userId}/password", wrapper.UpdateUserPassword)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RYT2/cthP9KgR/v6McbdqgCHRz7DZIUbRGGiMHYw+0NLvLhBIVkrKxWOi7FxyK0u6K",
	"+rPJ2gnao8QhOfPmzeOQO5rKvJQFFEbTZEdLplgOBhR+pRtIP78r3mU3zGxu7JD9ywua0JKZDY1owXKg",
	"SWdII6rgS8UVZDQxqoKI6nQDObMTV1LlzNCE8sL88opG1GxLcJ+wBkXrOqKVBjW9n7P6xs1qb46xvgGm",
	"QH2Qn6FAIJQsQRkOOGj872YRbRQv1uhw58FdY7Zs95L3nyA1tI7olQOov3LGDBy4iz+i440iyjM0B50q",
	"XhouLShVwb9UQHhG5IqYDRCLC42mY4+o4Tlow/Kyt7kdCTnQYD4zj/uwcJspH1e7b7viCF7XDTpfhdmR",
	"F2g0stdHbja3Fr9kR5kQf61ocrej/1ewogn9X9zVSdywJvZJraNxO1y1XtYR/VUpqd6DLmWhA4HloDVb",
	"Qz/ROI/44alIvZ3d8Q+55sWVggwKw5nQ/U1LpvWjVFmA3i5FruamuN9aRt2KIbT/hEeP8qEfayWrMuhE",
	"Dvm9515vcMC7iKoVz255eJKSYkZITThoHArlZg+52Zge7TGK1Wl09MhaOh66c1bt6Bf3sl6imEJaKW62",
	"f1t/YE9ULyuzsV/3+PWb3+D3jx9oI8F2AzfabbgxpnQqzYuV7AegQBvCSk5WUhE8gC54caG32kCOQmNE",
	"ezR1I8RPoxF9AKXdWi9fLF4sLOKyhMIOJvRn/BXhwYOxxKzksbDlhBmW2gRA1aCIs8G1FLMDlrmuEJsT",
	"C7R5I7MtHrGyMFDgUqwsBU9xRvxJS9ymO8/GMt8rcoTt0LV0b/j43MSUOlHCUH9aLM7m2/65GnDLZZ2Y",
	"ZrxjEU3ubEmwtbYsY5ZCyDJMw8PLGPPKCycdEMiF4NqQpjHR/XRwba66wW8KnxvI9RQO3WHhCc6UYtsQ",
	"Jui5XHXOWxOPRPMTxT1MwlQBM0CYn08eudkQRtb8AQpiZbGHxhVOeb/imXczOmgF75ou7EsFatu1Yc1a",
	"w01YT/vC6+w3BYEOzp7cF+G2pF72cvfybNRtUxasJmYg8xAPZChA15gJMU5ZJkSbecKELNYugagtKIUh",
	"Ll8K8T3o3DZN56N1CDTLgIlKR5OG6oYIYHazAtoMjQjANa7+jKhhW3s6Yi7GE2ArQV1kbDtPIu1GFrCM",
	"befTznPuBtQ1285TjQwNZ9zcBtr65b+P37v2Al27LAkwgWuA+98pey8l12gwqOGhgDuTOHDdD4D9KnDi",
	"eH7i9tlB4NhWHkRt/1xgtz9R0ki9xjBEPpuYt374PJTo3RTmJr3zlVia6x4G6GgfiBkQDAf/PKJ1Kv+d",
	"zwEOTDYszRUk1JvcuqGn6J7be1M/pAIevVNTHfP52o4hZ3zPUenmGjZeYm2rMaUmQgzQzKnJpRADXHsV",
	"vgDpE3RAx+72HqyANRhiG397bUm70I/dfAvmct+qpcoT3WiG8sPmZ2bnnr7miX0waJebJtTTZP74iXWe",
	"xqPAjSQ2GsmhU8f7LQlcPd6CeaoovmfKI1pWoQeCMhuRulscPSMc5xfLISRcYNlctfwhq/HgTWGGau53",
	"zpNlunc7e45ybX0Llez+G8Jw1c6LsKnfpwxv8Rw3+nM/uqykGu9ovrZL7wH2331UOSrf/Vf3b1Lf9mH/",
	"R1Xh1sGBnrXsAphS4oB2+NmkEfWgiB4+1R4+9d8tbeAa1IPH7VhDH0DIMrc4RLRSonnuT+JYyJSJjdQm",
	"eb14vaD1sv4nAAD//1XNbpKjHgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

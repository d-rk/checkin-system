openapi: "3.0.0"
info:
  version: 1.0.0
  title: check-in-system rest api
  description: rest api for check-in-system
servers:
  - url: http://localhost:8080
    description: development

paths:
  /api/login:
    post:
      tags:
        - auth
      security: []
      description: user login
      operationId: login
      requestBody:
        description: credentials
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginCredentials"
      responses:
        "200":
          description: "bearer token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BearerToken"

  /api/v1/users:
    get:
      tags:
        - user
      description: list users
      operationId: listUsers
      responses:
        "200":
          description: "list of users"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"

    post:
      tags:
        - user
      description: create a user
      operationId: createUser
      requestBody:
        description: new user
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewUser"
      responses:
        "201":
          description: "created user"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  /api/v1/users/me:
    get:
      tags:
        - user
      description: get authenticated user
      operationId: getAuthenticatedUser
      responses:
        "200":
          description: "a user"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  /api/v1/users/all:
    delete:
      tags:
        - user
      description: delete all users
      operationId: deleteAllUsers
      responses:
        "204":
          description: "users deleted"

  /api/v1/users/{userId}:
    get:
      tags:
        - user
      description: get a user by id
      operationId: getUser
      parameters:
        - $ref: '#/components/parameters/userIdPathParam'
      responses:
        "200":
          description: "a user"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

    put:
      tags:
        - user
      description: update a user
      operationId: updateUser
      parameters:
        - $ref: '#/components/parameters/userIdPathParam'
      requestBody:
        description: updated user
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "a user"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

    delete:
      tags:
        - user
      description: delete a user
      operationId: deleteUser
      parameters:
        - $ref: '#/components/parameters/userIdPathParam'
      responses:
        "204":
          description: "user deleted"

  /api/v1/users/{userId}/password:
    put:
      tags:
        - user
      description: update a user
      operationId: updateUserPassword
      parameters:
        - $ref: '#/components/parameters/userIdPathParam'
      requestBody:
        description: new password
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Password"
      responses:
        "204":
          description: "password updated"

  /api/v1/users/{userId}/checkins:
    get:
      tags:
        - checkIn
      description: get all checkIns of a user
      operationId: getUserCheckIns
      parameters:
        - $ref: '#/components/parameters/userIdPathParam'
      responses:
        "200":
          description: "list of checkIns"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckIn"

    post:
      tags:
        - checkIn
      description: create a checkIn for a user
      operationId: createCheckIn
      parameters:
        - $ref: '#/components/parameters/userIdPathParam'
        - name: timestamp
          in: query
          required: false
          schema:
            type: string
            format: date-time
      responses:
        "201":
          description: "created checkIn"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckIn"

    delete:
      tags:
        - checkIn
      description: delete all checkIns of a user
      operationId: deleteUserCheckIns
      parameters:
        - $ref: '#/components/parameters/userIdPathParam'
      responses:
        "204":
          description: "checkIns deleted"

  /api/v1/checkins:
    get:
      tags:
        - checkIn
      description: list checkIns
      operationId: listCheckIns
      responses:
        "200":
          description: "list of checkIns"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CheckIn"

    post:
      tags:
        - checkIn
      description: create a checkIn with a given rfid
      operationId: createRfidCheckIn
      parameters:
        - name: rfid
          in: query
          required: true
          schema:
            type: string
        - name: timestamp
          in: query
          required: false
          schema:
            type: string
            format: date-time
      responses:
        "201":
          description: "created checkIn"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckIn"

  /api/v1/checkins/{checkInId}:
    delete:
      tags:
        - user
      description: delete a checkIn
      operationId: deleteCheckIn
      parameters:
        - $ref: '#/components/parameters/checkInIdPathParam'
      responses:
        "204":
          description: "checkIn deleted"

  /api/v1/checkins/per-day:
    get:
      tags:
        - checkIn
      description: list checkIns of one day along with user info
      operationId: listCheckInsPerDay
      parameters:
        - in: query
          name: day
          schema:
            type: string
            format: date
          required: true
      responses:
        "200":
          description: "list of checkIns"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CheckInWithUser"

  /api/v1/checkins/all:
    get:
      tags:
        - checkIn
      description: list all checkIns along with user info
      operationId: listAllCheckIns
      responses:
        "200":
          description: "list of checkIns"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CheckInWithUser"

  /api/v1/checkins/dates:
    get:
      tags:
        - checkIn
      description: list dates with at least one checkIn
      operationId: listCheckInDates
      responses:
        "200":
          description: "list of checkIn dates"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CheckInDate"

  /api/v1/user-groups:
    get:
      tags:
        - userGroup
      description: list user groups
      operationId: listUserGroups
      responses:
        "200":
          description: "list of user group names"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string

components:
  parameters:
    userIdPathParam:
      name: userId
      in: path
      required: true
      schema:
        type: integer
        format: int64
    checkInIdPathParam:
      name: checkInId
      in: path
      required: true
      schema:
        type: integer
        format: int64
  schemas:
    Password:
      type: object
      required:
        - password
      properties:
        password:
          type: string
    LoginCredentials:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string

    NewUser:
      type: object
      required:
        - name
        - role
      properties:
        name:
          type: string
        memberId:
          type: string
        rfidUid:
          type: string
        role:
          type: string
        group:
          type: string

    User:
      allOf:
        - $ref: '#/components/schemas/NewUser'
        - required:
            - id
            - createdAt
          properties:
            id:
              type: integer
              format: int64
              description: unique id of the user
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time

    CheckIn:
      type: object
      required:
        - id
        - date
        - timestamp
        - userId
      properties:
        id:
          type: integer
          format: int64
          description: unique id of the user
        date:
          type: string
          format: date
        timestamp:
          type: string
          format: datetime
        userId:
          type: integer
          format: int64

    CheckInWithUser:
      allOf:
        - $ref: '#/components/schemas/CheckIn'
        - $ref: '#/components/schemas/User'

    CheckInDate:
      type: object
      required:
        - date
      properties:
        date:
          type: string
          format: date

    BearerToken:
      type: object
      required:
        - token
      properties:
        token:
          type: string

    ErrorResponse:
      required:
        - message
      properties:
        message:
          type: string
          description: Error message
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - BearerAuth: []